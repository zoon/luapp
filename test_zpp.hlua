local M = require'zpp'
-- layout
local layout = M.layout

-- Basic
local isDoc      = M.isDoc

local empty      = M.empty     
local text       = M.text     
local nest       = M.nest     
local group      = M.group    
local column     = M.column   
local nesting    = M.nesting  
local line       = M.line              -- \n | space
local linebreak  = M.linebreak         -- \n | empty
local softline   = M.group(line)
local softbreak  = M.group(linebreak)
local space      = M.space
local cat        = M.cat               -- <>
local catspace   = M.catspace          -- <+>
local abovespace = M.abovespace        -- <$>
local above      = M.above             -- <$$>


-- Primitives:
local lparen    =  M.lparen   
local rparen    =  M.rparen   
local langle    =  M.langle   
local rangle    =  M.rangle   
local lbrace    =  M.lbrace   
local rbrace    =  M.rbrace   
local lbracket  =  M.lbracket 
local rbracket  =  M.rbracket 
local backtick  =  M.backtick 
local squote    =  M.squote   
local dquote    =  M.dquote   
local semi      =  M.semi     
local colon     =  M.colon    
local comma     =  M.comma    
local dot       =  M.dot      
local backslash =  M.backslash
local assign    =  M.assign   


-- Combinators
local ifoldDoc         = M.ifoldDoc
local iseparateWith    = M.iseparateWith


-- PPrint's combinators
local indent    = M.indent
local align     = M.align
local hang      = M.hang
local fill      = M.fill
local fillBreak = M.fillBreak

-- Misc
local compose  = M.compose
local identity = M.identity

local insert = table.insert

--------------------------------------------------------------------------
--                                                                TEST: --
--------------------------------------------------------------------------
--------------------------------------------------------------------------

local rep_n = fun(n,word)-> 
  local result = {}
  for i=1,n do result `insert` word end
  return result
end 

local fun enumerate(n:'num') ->
  local res = {}
  for i=1,n do res `insert` tostring(i) end
  return res
end


local function test()
  --------------------------------------------------------------------------
  
  local function imap(tab,proc)
    local result = {}
    for i,v in ipairs(tab) do result[i] = proc(tab[i]) end
    return result
  end

  local nest4 = fn(d) => nest(4,d) end

  local words = fun(n) ->
    iseparateWith(line,text)(rep_n(n,'foobar'))
  end

  local groupit  = fn(x) => group(text"<"+x+text">")end

  local fun enclose(l,r) ->
    fun (body) -> group(l+nest4(line+body) / r) end
  end

  local fun fillSep(xs@{_:'str',...}) ->
    iseparateWith(group(line),text)(xs)
  end

  local semisep = fun(strings@{_:'str',...}) ->
    iseparateWith(text";"+line,text)(strings)
  end

  local brackets = fn(x) => enclose(text"{",text"}")(x) end

  local ifthen   = 
    fn(cond,body) => text"if("+cond+text")"+brackets(body) end

  
  --------------------------------------------------------------------------

  print(isDoc$groupit(words(4)))
  print$brackets(semisep(rep_n(4,"Abracadabra")))
  print$brackets(semisep(rep_n(2,"Abracadabra")))
  print$ifthen(text"x != NULL",text'println("I`am short!");')
  print$nest(8,(line+ifthen(text"x != NULL && align != NULL",
                               text'println("I`am aligned!");')))
  print$ifthen(text"x != NULL && y != NULL && z != NULL",
               text'println("Hello, Cruel World!");')

  print$ nest(20,(linebreak+fillSep(enumerate(100))))
  print$ fillSep(enumerate(100))

  print$layout(hang(#~"hang"+1,fillSep(rep_n(100,"hang"))),72,1)
  print$layout(indent(40,fillSep(rep_n(20,"indent"))),72,1)

 
  -- fillers
  
  local vcat = iseparateWith(linebreak,identity)
  local data =
    {{'empty',"Doc"};{"nest","Int -> Doc -> Doc"};{"linebreak","Doc"}}
  local d1 = vcat$imap(data,fn(x)=>
                         fill(6, text(x[1]))-text"::"-text(x[2])end)
  local d2 = vcat$imap(data,fn(x)=>
                         fillBreak(6,text(x[1]))-text"::"-text(x[2])end)
  print$text"let"-align(d1)
  print''
  print$text"let"-align(d2)

  -- NOTE: WAS BUG: group(align(x))
  print$group(align(empty+text"++++++++++++"))

  -- fillSep by ifoldDoc
  
  print$ifoldDoc(fn(seed,x)=>seed+group(line)+x end)(rep_n( 0,text"fill"))
  print$ifoldDoc(fn(seed,x)=>seed+group(line)+x end)(rep_n( 1,text"fill"))
  print$ifoldDoc(fn(seed,x)=>seed+group(line)+x end)(rep_n( 2,text"fill"))
  -- should be 3x9
  print$ifoldDoc(fn(seed,x)=>seed+group(line)+x end)(rep_n(27,text"fill"))

  local N = 1E4

  print'++++++++++++'
 
  -- * --
  collectgarbage('collect')
  local Ndocs=enumerate(N)
  for i=1,#Ndocs do
    Ndocs[i]=text(Ndocs[i])
  end
  local t3 = os.clock()
  local softbr = group(line)
  local XXX = ifoldDoc(fn(seed,x)=>seed+(softbr+x)end)(Ndocs)
  layout(XXX,78,0.8)
  local t4 = os.clock()
  print('filling-fold '..N.." numbers:",t4-t3,"sec")
  -- * --
  
  -- * --
  collectgarbage('collect')
  local t1 = os.clock()
  local XX = fillSep(enumerate(N))
  layout(XX,78,0.8)
  local t2 = os.clock()
  print('filling '..N.." numbers:",t2-t1,"sec")
  -- * --


  local data17 = enumerate(17) -- 10 + 7
  print(layout(iseparateWith(softline,text)(data17),20,1))

end -- of test

-- do test:
test()

